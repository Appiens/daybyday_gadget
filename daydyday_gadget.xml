<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
  <ModulePrefs title="daybyday_gadget" scrolling="true" author_email="info@appiens.com" height="400">
    <Require feature="opensocial-0.8" />
    <Require feature="locked-domain"/>
      <OAuth>
      <Service name="google">
        <Access url="https://www.google.com/accounts/OAuthGetAccessToken" method="GET" /> 
            <Request url="https://www.google.com/accounts/OAuthGetRequestToken?scope=https://www.googleapis.com/auth/tasks" method="GET" /> 
        <Authorization url="https://www.google.com/accounts/OAuthAuthorizeToken?oauth_callback=http://oauth.gmodules.com/gadgets/oauthcallback" /> 
      </Service>
    </OAuth>
    <Locale messages="https://raw.githubusercontent.com/Appiens/daybyday_gadget/master/lang/ALL_ALL.xml"/>
    <Locale lang="ru" messages="https://raw.githubusercontent.com/Appiens/daybyday_gadget/master/lang/ru_ALL.xml"/>
  </ModulePrefs>
  <Content type="html">
  <![CDATA[
  <style>
    html {height: 100%;}
    body {height:auto !important; min-height:100%; height:100%; position:relative; }
    #footer {position:absolute; bottom:0; width:100%; background:white; border-top:thin solid slategray; height: 30px}

  	#main {
	  margin: 0px;
	  padding: 0px;
      font-size: small;
      padding-bottom: 50px;
	}

	#watch {
	  margin: 0px;
	  padding: 0px;
      font-size: small;
	}
	
	#listId {
  	  margin: 0;
  	  padding: 0;
	}

	.collapsibleList li{
    	  list-style-image:none; 
    	  list-style-type:none;
          cursor:auto;
          list-style: none;
  	      padding: 0;
  	      margin: 0;
	}

    li.collapsibleListOpen{
         cursor:pointer;
         background: url('https://raw.githubusercontent.com/Appiens/daybyday_gadget/master/images/button-minus.png'); <!--no-repeat top left;-->
         background-position: 0 5px;
         background-size: 12px 12px;
         background-repeat: no-repeat;
  	     margin: 0;
  	     list-style: none;
  	     padding: 0 0 0 15px;
    }

    li.collapsibleListClosed{
         cursor:pointer;
         background: url('https://raw.githubusercontent.com/Appiens/daybyday_gadget/master/images/button-plus.png'); <!--no-repeat top left;-->
         background-position: 0 5px;
         background-size: 12px 12px;
         background-repeat: no-repeat;
  	     margin: 0;
  	     list-style: none;
  	     padding: 0 0 0 15px;
    }
       
	ul {
    padding: 0; /* Убираем поля */
    	margin-left: 5px; /* Отступ слева */
	}

	.myStyle span {
    	text-indent:25px;
        display:inline-block;
    	cursor:pointer;
	}

    .new-select-style-wpandyou select, textarea, input[type=text], input[type=date] {
        font-family: Arial;
        width:87%;
        min-height:20px;
        display:block;
        margin-bottom:8px;
        margin-top:5px;
        padding-left:5px;
        outline: none;
        box-sizing:content-box;
    }

    .new-select-style-wpandyou  input[type=date] {
        font-family: Arial;
        margin-bottom:8px;
        margin-top:5px;
        padding-left:5px;
        padding-right: 0px;
        outline: none;
        outline-width: thin;
        box-sizing:content-box;
        display:block;
    }

    input[type=button] {
        background-color: #DFEEFF;
        text-indent:0px;
        border:1px solid #0099CC;
        display:inline-block;
        color:#14396a;
        font-weight:normal;
        font-style:normal;
        font-size: medium;
        height:20px;
        line-height:20px;
        text-decoration:none;
        text-align:center;
        vertical-align:top;
        margin-bottom:0px;
        margin-top:0px;
    }

    input[type=button]:hover {
        background-color:#33B5E5;
    }

    input[type=button]:active {
        position:relative;
        top:1px;
    }

    input[type=button]:disabled {
        background-color: #dcdcdc;
        border:1px solid #dcdcdc;
        display:inline-block;
        color:#777777;
    }

    textarea {
        resize: vertical;
    }

    a, a:hover {
        text-decoration: none;
    }

    ul#navWrapper {
        border: 0 black dashed;
        margin-left: 9px;
        float: left;
    }

    ul#navWrapper li {
        border: 0 red dashed;
        float: left;
        list-style: none;
        margin-right: 0.75em;
        background-color: #DDD;
        padding: 0 0.25em;
    }

    ul#navWrapper li li {
        border: 0 black dashed;
        float: none;
        margin-left: -5px;
        margin-top: 3px;
    }

    ul#navWrapper li li:first-child {
        margin-top: 4px;
    }

    ul#navWrapper ul {
        display: none;
        position: absolute;
        background-color: #FFF; /* For non-CSS3 browsers. */
        background-color: rgba(255, 255, 255, 0);
    }

    ul#navWrapper li:hover ul {
        display: block;
    }

    ul#navWrapper a {
        display: block;
        color: black;
        text-decoration: none;
    }

    ul#navWrapper li:hover {
        background-color: #33B5E5;
    }
  </style>
  <script type="text/javascript" src="https://rawgit.com/Appiens/daybyday_gadget/master/javascript/CollapsibleLists.js"></script>
  <script type="text/javascript" src="https://rawgit.com/Appiens/daybyday_gadget/master/javascript/shindig.js"></script>
  <script type="text/javascript" src="https://rawgit.com/Appiens/daybyday_gadget/master/javascript/WinFuncs.js"></script>
  <script type="text/javascript" src="https://rawgit.com/Appiens/daybyday_gadget/master/javascript/DateTimeClass.js"></script>
  <script type="text/javascript">
  
    var taskLists = []; // полный список задач
    var taskListsTmp = [];  // список обновлений, получаемый каждый "интервал запроса"
    var errorOccured = false; // признак ошибки при полной загрузке данных
    var errorOccuredTmp = false; // признак ошибки при загрузке обновлений (lastUpdated)
    var timeLastAsk; // время последнего дополнительного запроса
    var requestInterval = 5 * 60 * 1000; // интервал запросов обновлений (мс)
    var timerFetchNewData = -1; // таймер для загрузки обновлений с сервера

    function startGadget() {
        init(makePOSTRequest);
        $('button-refresh').addEventListener('click', fetchDataAll);
        fetchDataAll();
    }

    function fetchDataAll() {
        errorOccured = false;

        // Break the updates cycle
        if (timerFetchNewData != -1) {
            clearTimeout(timerFetchNewData);
            timerFetchNewData = -1;
        }

        // Clear the list
        var ulMain = document.getElementById('listId');

        while( ulMain.firstChild ){
            ulMain.removeChild( ulMain.firstChild );
        }

        // Hide err section
         $('label-oauth-error').style.display = 'none';

        fetchData(OnFetchDataDoneAll);
    }

    function fetchOnlyNewData() {
        var d = new Date();
        console.log(d + ' fetchOnlyNewData');
        errorOccuredTmp = false;
        fetchData(OnFetchDataDoneNew);
    }

    function OnFetchDataDoneAll(response) {
        if (response.oauthApprovalUrl) {
          // Create the popup handler. The onOpen function is called when the user
          // opens the popup window. The onClose function is called when the popup
          // window is closed.
          var popup = shindig.oauth.popup({
            destination: response.oauthApprovalUrl,
            windowOptions: null,
            onOpen: function() { showOneSection('waiting'); },
            onClose: function() { fetchDataAll(); }
          });
          // Use the popup handler to attach onclick handlers to UI elements.  The
          // createOpenerOnClick() function returns an onclick handler to open the
          // popup window.  The createApprovedOnClick function returns an onclick
          // handler that will close the popup window and attempt to fetch the user's
          // data again.
          var personalize = document.getElementById('personalize');
          personalize.onclick = popup.createOpenerOnClick();
          var approvaldone = document.getElementById('approvaldone');
          approvaldone.onclick = popup.createApprovedOnClick();
          showOneSection('approval');
        } else if (response.data) {
                 alert('13:16');
                 taskLists = [];
                 taskLists = response.data.items;
                 for(var i=0; i< taskLists.length; i++) {
                    taskLists[i].isLoading = true;
                    getTasksForTaskList(taskLists[i]);
                 }
            }
         else {
                var main = document.getElementById('main');
                $('label-oauth-error').innerText = 'OAuth error: ' + response.oauthError + ': ' + response.oauthErrorText;
                $('label-oauth-error').style.display = '';
                showOneSection('main');
                errorOccured = true;
        }
    }

    function OnFetchDataDoneNew(response) {
        if (response.oauthApprovalUrl) {
           // сюда не должны попадать вообще
        } else if (response.data) {

                 // responseCounter = 0; //счётчик поступивших ответов на запросы о тасках
                 taskListsTmp = response.data.items;
                 for(var i=0; i< taskListsTmp.length; i++) {
                    taskListsTmp[i].isLoading = true;
                    getTasksForTaskListTmp(taskListsTmp[i]);
                 }
            }
        else {
               taskListsTmp = null;
               console.log('Error loading task lists');
        }

        timerFetchNewData = setTimeout(fetchOnlyNewData , requestInterval);
    }

    // Invoke makeRequest() to fetch data from the service provider endpoint.
    // Depending on the results of makeRequest, decide which version of the UI
    // to ask showOneSection() to display. If user has approved access to his
    // or her data, display data.
    // If the user hasn't approved access yet, response.oauthApprovalUrl contains a
    // URL that includes a Google-supplied request token. This is presented in the 
    // gadget as a link that the user clicks to begin the approval process. 
       
    function fetchData(onDone) {

        var params = {};
        url = "https://www.googleapis.com/tasks/v1/users/@me/lists?key=" + API_KEY;
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
        params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "google";
        params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = "always";
        params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;

        gadgets.io.makeRequest(url, onDone, params);
    }

    function getTasksForTaskList(taskList) {
        if (errorOccured) {
           return;
        }

        fetchDataTaskList(taskList, function (response) {
        if (response.oauthApprovalUrl) {
          // сюда попадать вообще не должны
        } else if (response.data) {
           taskList.isLoading = false;
           taskList.tasks = response.data.items;

           if (allTasksLoaded(taskLists)) {
              generateList(taskLists);
              CollapsibleLists.applyTo(document.getElementById('listId'));
              showOneSection('main');
              // alert('done');

              setTimeLastAsk();
              timerFetchNewData = setTimeout(fetchOnlyNewData , requestInterval);
           }
        } else {
            // The response.oauthError and response.oauthErrorText values may help debug
            // problems with your gadget.
            var main = document.getElementById('main');
            $('label-oauth-error').innerText = 'OAuth error: ' + response.oauthError + ': ' + response.oauthErrorText;
            $('label-oauth-error').style.display = '';
            showOneSection('main');
            errorOccured = true;
        }
      }, "&showCompleted=true");
    }

    function getTasksForTaskListTmp(taskList) {

        fetchDataTaskList(taskList, function (response) {
            // responseCounter++;
            if (response.oauthApprovalUrl) {
                // сюда попадать вообще не должны
            }
            else if (response.data) {
                taskList.isLoading = false;
                taskList.tasks = response.data.items;
                console.log("Good result for " + taskList.title);

                if (allTasksLoaded(taskListsTmp)) {
                    processTmpList(taskListsTmp);
                    setTimeLastAsk();
                }
            }
            else {
                    console.log("Error for " + taskList.title);
                    errorOccuredTmp = true;
            }

      }, "&showDeleted=true&updatedMin=" + timeLastAsk);
    }
    
    function fetchDataTaskList(taskList, onDone, options) {
        var params = {};
	    url = "https://www.googleapis.com/tasks/v1/lists/" + taskList.id + "/tasks?key=" + API_KEY + options;
	    console.log(url);
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
        params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "google";
        params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = "always";
        params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
 
        gadgets.io.makeRequest(url, onDone, params);
   
    }

    function setTimeLastAsk() {
        var dateStart = new MyDate();
        var timeStart = new MyTime();
        timeLastAsk = dateStart.toInputValue() + timeStart.toTimeWithTimeZone();
        console.log(timeLastAsk);
        timeLastAsk = timeLastAsk.split(':').join('%3A');
        console.log(timeLastAsk);
        timeLastAsk = timeLastAsk.split('+').join('%2B');
        console.log(timeLastAsk);
    }

    // tl - task lists
    function allTasksLoaded(tl) {
        var i;
        for(var i=0; i< tl.length; i++) {
            if (tl[i].isLoading) {
                break;
            }
        }

        return i == tl.length;
    }
    
   function makePOSTRequest(url, postdata, callback, method) {
   	    var params = {};
   	    var methodType;
   	    switch (method) {
            case "PUT":
                methodType = gadgets.io.MethodType.PUT;
                break;
            case "POST":
                methodType = gadgets.io.MethodType.POST;
                break;
            case "DELETE":
                methodType = gadgets.io.MethodType.DELETE;
                break;
            default:
                methodType = gadgets.io.MethodType.PUT;
        }

   	    params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
   	    params[gadgets.io.RequestParameters.METHOD] = methodType; //gadgets.io.MethodType.PUT;
   	    params[gadgets.io.RequestParameters.HEADERS] = {'Content-Type': 'application/json'}
        params[gadgets.io.RequestParameters.POST_DATA]= postdata;
   	    params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
   	    params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "google";
   	    params[gadgets.io.RequestParameters.OAUTH_USE_TOKEN] = "always";
   	    gadgets.io.makeRequest(url, callback, params);
};

    // Call () when gadget loads.
    gadgets.util.registerOnLoadHandler(startGadget);
  </script>

  <div id="footer">
    <input type="button" id="button-refresh" name="button-refresh" value="&#x27F3" title="__MSG_action_refresh__"/>
  </div>
  
  <div id="main" style="display: none; height: 80%; overflow-y: scroll;">
	<ul id="listId" class="collapsibleList"></ul>
	<label id="label-oauth-error" style="display:none;"></label>
  </div>

  <div id="approval" style="display: none">
    <a href="#" id="personalize">Personalize this gadget</a>
  </div>

  <div id="waiting" style="display: none">
    Please click
    <a href="#" id="approvaldone">I've approved access</a>
    once you've approved access to your data.
  </div>

  <div id="watch" style="display: none">
     <table cellpadding=0 width=87%>
                <tr>
                    <td style="width: 7%; text-align:left; vertical-align:middle;">
                         <input type="checkbox" id="checkbox-task-completed" name="checkbox-task-completed" checked="false" title="">
                    </td>
                    <td style="width: 93%; text-align:left; vertical-align:middle;font-size: small;">
                        <label id="label-task-completed">__MSG_completed__</label>
                    </td>
                </tr>
    </table>
    <input type="text" id="input-task-name" name="input-task-name" placeholder="__MSG_title_default__"/>
    <div id="div-status-images"></div>
    <table cellpadding=0 width=87%>
                <tr>
                    <td style="width: 7%; text-align:left; vertical-align:middle;">
                            <input type="checkbox" id="checkbox-with-date" name="checkbox-with-date" checked="true" title="">
                    </td>
                    <td style="width: 93%; text-align:left; vertical-align:middle;font-size: small;">
                        <label id="label-task-date">__MSG_due_date__</label>
                    </td>
                </tr>
    </table>
    <input type="date" id="input-task-date" name="input-task-date" required>
    <div id="div-notes" class="new-select-style-wpandyou">
    <textarea name="input-task-comment" id="input-task-comment" rows="5" placeholder="__MSG_notes_default__"></textarea>
    </div>
    <ul id="navWrapper">
        <li>
            <a href="pageA.html" aria-haspopup="true">__MSG_action_move_to_list__</a>
            <ul id="taskListsWatch">
            </ul>
        </li>
    </ul> <br>
       <table cellpadding=0 width=50%>
                <tr>
                    <td style="width: 25%; text-align:left; vertical-align:middle;">
                        <input type="button" id="button-back-to-list" name="button-back-to-list" value="&#x25C1" title="__MSG_action_back_to_list__"/>
                    </td>
                    <td style="width: 25%; text-align:left; vertical-align:middle;">
                        <input type="button" id="button-save_task" name="button-save-task" value="&#x2713" title="__MSG_action_save_task__"/>
                    </td>
                    <td style="width: 25%; text-align:left; vertical-align:middle;">
                        <input type="button" id="button-to-subtasks" name="button-to-subtasks" value="&#x2261" title="__MSG_action_to_subtasks__"/>
                    </td>
                    <td style="width: 25%; text-align:left; vertical-align:middle;">
                        <input type="button" id="button-discard" name="button-discard" value="&#x2715" title="__MSG_action_discard__"/>
                    </td>
                </tr>
    </table>
  </div>
  ]]> 
  </Content>
</Module>
